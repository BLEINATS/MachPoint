import { createClient } from '@supabase/supabase-js'
import { supabaseMock } from './supabaseMockClient';

// A verificaÃ§Ã£o foi tornada mais robusta para garantir que o modo offline seja ativado corretamente.
const useMock = String(import.meta.env.VITE_USE_MOCK_DB).toLowerCase() === 'true';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!useMock && (!supabaseUrl || !supabaseAnonKey)) {
  console.error("ğŸš¨ Supabase URL and/or Anon Key are missing. Please check your environment variables.");
  throw new Error("Missing Supabase configuration");
}

let supabaseInstance: any;

if (useMock) {
  console.log('ğŸ”§ Usando MODO OFFLINE com dados mockados.');
  supabaseInstance = supabaseMock;
} else {
  console.log('ğŸ”§ ConfiguraÃ§Ã£o padrÃ£o Supabase');
  console.log('ğŸ”— URL:', supabaseUrl);
  
  supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce' // Seguro para SPAs
    },
    global: {
      fetch: (url, options = {}) => {
        return fetch(url, {
          ...options,
          cache: 'no-store' // Evita problemas de cache em Replit
        })
      }
    },
    db: {
      schema: 'public'
    }
  });
}

export const supabase = supabaseInstance;

// FunÃ§Ã£o de retry para operaÃ§Ãµes que falham
export const supabaseWithRetry = async (operation: () => Promise<any>) => {
  if (useMock) {
    return operation(); // No mock, nÃ£o precisamos de retry
  }
  
  const maxRetries = 3
  let retries = 0
  
  while (retries < maxRetries) {
    try {
      return await operation()
    } catch (error: any) {
      console.log(`Tentativa ${retries + 1} falhou:`, error.message)
      if (error.message.includes('Failed to fetch') && retries < maxRetries - 1) {
        retries++
        console.log(`Tentando novamente em ${retries * 1000}ms...`)
        await new Promise(resolve => setTimeout(resolve, 1000 * retries))
        continue
      }
      throw error
    }
  }
}

// Monitor de visibilidade para reconectar quando a pÃ¡gina volta ao foco
if (typeof document !== 'undefined' && !useMock) {
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      console.log('ğŸ”„ PÃ¡gina voltou ao foco, verificando sessÃ£o...')
      supabase.auth.getSession()
    }
  })
}
