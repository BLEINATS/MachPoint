import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { ArrowLeft, Users, GraduationCap, BookOpen, Plus, Search, BadgeCheck, BadgeX, BadgeHelp, Briefcase, Loader2, Phone, Star, Edit, Trash2, Calendar, DollarSign } from 'lucide-react';
import Layout from '../components/Layout/Layout';
import { useAuth } from '../context/AuthContext';
import { useToast } from '../context/ToastContext';
import { supabase, supabaseWithRetry } from '../lib/supabaseClient';
import { Aluno, Professor, Quadra, Turma, Reserva, GamificationReward } from '../types';
import Button from '../components/Forms/Button';
import Input from '../components/Forms/Input';
import AlunoModal from '../components/Alunos/AlunoModal';
import ProfessorModal from '../components/Alunos/ProfessorModal';
import TurmaModal from '../components/Alunos/TurmaModal';
import TurmaCard from '../components/Alunos/TurmaCard';
import ConfirmationModal from '../components/Shared/ConfirmationModal';
import { format } from 'date-fns';
import { parseDateStringAsLocal } from '../utils/dateUtils';

type TabType = 'clientes' | 'alunos' | 'professores' | 'turmas';

const getNextDateForDay = (startDate: Date, dayOfWeek: number): Date => {
  const date = new Date(startDate.getTime());
  const currentDay = date.getDay();
  const distance = (dayOfWeek - currentDay + 7) % 7;
  date.setDate(date.getDate() + distance);
  return date;
};

const Alunos: React.FC = () => {
  const { arena } = useAuth();
  const { addToast } = useToast();
  const location = useLocation();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<TabType>('clientes');
  
  const [alunos, setAlunos] = useState<Aluno[]>([]);
  const [professores, setProfessores] = useState<Professor[]>([]);
  const [turmas, setTurmas] = useState<Turma[]>([]);
  const [quadras, setQuadras] = useState<Quadra[]>([]);
  const [gamificationRewards, setGamificationRewards] = useState<GamificationReward[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  const [isAlunoModalOpen, setIsAlunoModalOpen] = useState(false);
  const [editingAluno, setEditingAluno] = useState<Aluno | null>(null);
  
  const [isProfessorModalOpen, setIsProfessorModalOpen] = useState(false);
  const [editingProfessor, setEditingProfessor] = useState<Professor | null>(null);

  const [isTurmaModalOpen, setIsTurmaModalOpen] = useState(false);
  const [editingTurma, setEditingTurma] = useState<Turma | null>(null);

  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<{ id: string; name: string; type: 'aluno' | 'professor' } | null>(null);

  const loadData = useCallback(async () => {
    if (!arena) return;
    setIsLoading(true);
    try {
      const [alunosRes, professoresRes, turmasRes, quadrasRes, rewardsRes] = await supabaseWithRetry(() =>
        Promise.all([
          supabase
            .from('alunos')
            .select(`
              id, arena_id, profile_id, name, email, phone, status, sport, plan_name, monthly_fee, join_date, created_at, avatar_url, credit_balance, gamification_level_id, gamification_points,
              gamification_levels(name)
            `)
            .eq('arena_id', arena.id),
          supabase.from('professores').select('*').eq('arena_id', arena.id),
          supabase.from('turmas').select('*').eq('arena_id', arena.id),
          supabase.from('quadras').select('*').eq('arena_id', arena.id),
          supabase.from('gamification_rewards').select('*').eq('arena_id', arena.id).eq('is_active', true),
        ])
      );

      if (alunosRes.error) throw alunosRes.error;
      if (professoresRes.error) throw professoresRes.error;
      if (turmasRes.error) throw turmasRes.error;
      if (quadrasRes.error) throw quadrasRes.error;
      if (rewardsRes.error) throw rewardsRes.error;

      setAlunos(alunosRes.data || []);
      setProfessores(professoresRes.data || []);
      setTurmas(turmasRes.data || []);
      setQuadras(quadrasRes.data || []);
      setGamificationRewards(rewardsRes.data || []);

    } catch (error: any) {
      addToast({ message: `Erro ao carregar dados: ${error.message}`, type: 'error' });
    } finally {
      setIsLoading(false);
    }
  }, [arena, addToast]);


  useEffect(() => {
    loadData();
  }, [loadData]);
  
  const handleDataChange = useCallback(() => {
    loadData();
  }, [loadData]);
  
  useEffect(() => {
    if (location.state?.openModal) {
      setIsAlunoModalOpen(true);
      navigate(location.pathname, { replace: true });
    }
  }, [location.state, navigate]);

  const handleSaveAluno = async (alunoData: Omit<Aluno, 'id' | 'arena_id' | 'created_at'> | Aluno) => {
    if (!arena) return;
    const isEditing = 'id' in alunoData;
    const dataToSave = { ...alunoData, arena_id: arena.id };
    delete (dataToSave as any).gamification_levels;
    delete (dataToSave as any).gamification_point_transactions;
    if (!isEditing) delete (dataToSave as any).id;
    if (!dataToSave.profile_id) delete (dataToSave as any).profile_id;
    
    try {
        const { error } = await supabase.from('alunos').upsert(dataToSave);
        if (error) throw error;
        addToast({ message: `Cliente/Aluno ${isEditing ? 'atualizado' : 'criado'} com sucesso!`, type: 'success' });
        await loadData();
        setIsAlunoModalOpen(false);
        setEditingAluno(null);
    } catch (error: any) {
        addToast({ message: `Erro ao salvar cliente/aluno: ${error.message}`, type: 'error' });
    }
  };

  const handleDeleteRequest = (id: string, name: string, type: 'aluno' | 'professor') => {
    setItemToDelete({ id, name, type });
    setIsDeleteModalOpen(true);
    setIsAlunoModalOpen(false);
    setIsProfessorModalOpen(false);
  };

  const handleConfirmDelete = async () => {
    if (!itemToDelete) return;

    const { id, type } = itemToDelete;
    const toastSuccessMessage = `${type === 'aluno' ? 'Cliente/Aluno' : 'Professor'} excluÃ­do com sucesso.`;
    const toastErrorMessage = `Erro ao excluir ${type === 'aluno' ? 'cliente/aluno' : 'professor'}:`;
    const tableName = type === 'aluno' ? 'alunos' : 'professores';

    try {
      const { error } = await supabase.from(tableName).delete().eq('id', id);
      if (error) throw error;
      addToast({ message: toastSuccessMessage, type: 'success' });
      await loadData();
    } catch (error: any) {
      addToast({ message: `${toastErrorMessage} ${error.message}`, type: 'error' });
    } finally {
      setIsDeleteModalOpen(false);
      setItemToDelete(null);
    }
  };

  const handleDeleteAluno = (id: string) => {
    const aluno = alunos.find(a => a.id === id);
    if (aluno) {
      handleDeleteRequest(aluno.id, aluno.name, 'aluno');
    }
  };

  const handleDeleteProfessor = (id: string) => {
    const professor = professores.find(p => p.id === id);
    if (professor) {
      handleDeleteRequest(professor.id, professor.name, 'professor');
    }
  };

  const handleSaveProfessor = async (professorData: Omit<Professor, 'id' | 'arena_id' | 'created_at'> | Professor) => {
    if (!arena) return;
    const isEditing = 'id' in professorData;
    const dataToSave = { ...professorData, arena_id: arena.id };
    if (!isEditing) delete (dataToSave as any).id;
    
    try {
        const { error } = await supabase.from('professores').upsert(dataToSave);
        if (error) throw error;
        addToast({ message: `Professor ${isEditing ? 'atualizado' : 'criado'} com sucesso!`, type: 'success' });
        await loadData();
        setIsProfessorModalOpen(false);
        setEditingProfessor(null);
    } catch (error: any) {
        addToast({ message: `Erro ao salvar professor: ${error.message}`, type: 'error' });
    }
  };

  const handleSaveTurma = async (turmaData: Omit<Turma, 'id' | 'arena_id' | 'created_at'> | Turma) => {
    if (!arena) return;
    const isEditing = 'id' in turmaData;
    
    try {
        const turmaToSave = { ...turmaData, arena_id: arena.id };
        if (!isEditing) delete (turmaToSave as any).id;
        const { data: savedTurma, error: turmaError } = await supabase.from('turmas').upsert(turmaToSave).select().single();
        if (turmaError || !savedTurma) throw turmaError || new Error("Falha ao salvar a turma.");
        
        const turmaId = savedTurma.id;

        const { error: deleteError } = await supabase.from('reservas').delete().eq('turma_id', turmaId);
        if (deleteError) throw deleteError;

        const newMasterReservations: Omit<Reserva, 'id' | 'created_at'>[] = [];
        const startDate = parseDateStringAsLocal(savedTurma.start_date);

        savedTurma.daysOfWeek.forEach(day => {
            const firstOccurrenceDate = getNextDateForDay(startDate, day);
            newMasterReservations.push({
                arena_id: arena.id,
                quadra_id: savedTurma.quadra_id,
                turma_id: turmaId,
                date: format(firstOccurrenceDate, 'yyyy-MM-dd'),
                start_time: savedTurma.start_time,
                end_time: savedTurma.end_time,
                type: 'aula',
                status: 'confirmada',
                clientName: savedTurma.name,
                isRecurring: true,
                recurringType: 'weekly',
                recurringEndDate: savedTurma.end_date,
            });
        });

        if (newMasterReservations.length > 0) {
            const { error: insertError } = await supabase.from('reservas').insert(newMasterReservations);
            if (insertError) throw insertError;
        }

        addToast({ message: `Turma ${isEditing ? 'atualizada' : 'criada'} com sucesso!`, type: 'success' });
        await loadData();
        setIsTurmaModalOpen(false);
        setEditingTurma(null);

    } catch (error: any) {
        addToast({ message: `Erro ao salvar turma: ${error.message}`, type: 'error' });
    }
  };

  const handleDeleteTurma = async (id: string) => {
    if (!arena || !window.confirm('Tem certeza que deseja excluir esta turma? As reservas recorrentes associadas tambÃ©m serÃ£o removidas.')) return;
    
    try {
        await supabase.from('reservas').delete().eq('turma_id', id);
        await supabase.from('turmas').delete().eq('id', id);
        addToast({ message: 'Turma excluÃ­da com sucesso.', type: 'success' });
        await loadData();
    } catch (error: any) {
        addToast({ message: `Erro ao excluir turma: ${error.message}`, type: 'error' });
    }
  };

  const isAluno = (aluno: Aluno): boolean => {
    return !!(aluno.plan_name && aluno.plan_name.toLowerCase() !== 'avulso' && aluno.plan_name.toLowerCase() !== 'paga por uso');
  }

  const filteredClientes = useMemo(() => 
    alunos.filter(a => 
      !isAluno(a) &&
      (a.name.toLowerCase().includes(searchTerm.toLowerCase()) || (a.email && a.email.toLowerCase().includes(searchTerm.toLowerCase())))
    ),
    [alunos, searchTerm]
  );
  
  const filteredAlunos = useMemo(() => 
    alunos.filter(a => 
      isAluno(a) &&
      (a.name.toLowerCase().includes(searchTerm.toLowerCase()) || (a.email && a.email.toLowerCase().includes(searchTerm.toLowerCase())))
    ),
    [alunos, searchTerm]
  );

  const filteredProfessores = useMemo(() =>
    professores.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()) || p.email.toLowerCase().includes(searchTerm.toLowerCase())),
    [professores, searchTerm]
  );

  const filteredTurmas = useMemo(() =>
    turmas.filter(t => t.name.toLowerCase().includes(searchTerm.toLowerCase())),
    [turmas, searchTerm]
  );
  
  const availableSports = useMemo(() => [...new Set(quadras.flatMap(q => q.sports || []).filter(Boolean))], [quadras]);
  const availablePlans = useMemo(() => [...new Set(alunos.map(a => a.plan_name).filter(Boolean))], [alunos]);

  const tabs: { id: TabType; label: string; icon: React.ElementType }[] = [
    { id: 'clientes', label: 'Clientes', icon: Users },
    { id: 'alunos', label: 'Alunos', icon: GraduationCap },
    { id: 'professores', label: 'Professores', icon: Briefcase },
    { id: 'turmas', label: 'Turmas', icon: BookOpen },
  ];

  const addButtonLabel = useMemo(() => {
    switch (activeTab) {
        case 'clientes': return 'Adicionar Cliente';
        case 'alunos': return 'Adicionar Aluno';
        case 'professores': return 'Adicionar Professor';
        case 'turmas': return 'Adicionar Turma';
    }
  }, [activeTab]);

  const searchPlaceholder = useMemo(() => {
    switch (activeTab) {
        case 'clientes': return 'Buscar por cliente...';
        case 'alunos': return 'Buscar por aluno...';
        case 'professores': return 'Buscar por professor...';
        case 'turmas': return 'Buscar por turma...';
    }
  }, [activeTab]);

  const renderContent = () => {
    if (isLoading) {
        return (
            <div className="flex justify-center items-center h-64">
                <Loader2 className="w-8 h-8 text-brand-blue-500 animate-spin" />
            </div>
        );
    }
    switch (activeTab) {
      case 'clientes':
        return <AlunosList alunos={filteredClientes} onEdit={setEditingAluno} />;
      case 'alunos':
        return <AlunosList alunos={filteredAlunos} onEdit={setEditingAluno} />;
      case 'professores':
        return <ProfessoresList professores={filteredProfessores} onEdit={setEditingProfessor} onDelete={handleDeleteProfessor} />;
      case 'turmas':
        return <TurmasList turmas={filteredTurmas} professores={professores} quadras={quadras} onEdit={setEditingTurma} onDelete={handleDeleteTurma} />;
      default:
        return null;
    }
  };
  
  useEffect(() => {
    if (editingAluno) setIsAlunoModalOpen(true);
  }, [editingAluno]);

  useEffect(() => {
    if (!isAlunoModalOpen) setEditingAluno(null);
  }, [isAlunoModalOpen]);
  
  useEffect(() => {
    if (editingProfessor) setIsProfessorModalOpen(true);
  }, [editingProfessor]);

  useEffect(() => {
    if (!isProfessorModalOpen) setEditingProfessor(null);
  }, [isProfessorModalOpen]);

  useEffect(() => {
    if (editingTurma) setIsTurmaModalOpen(true);
  }, [editingTurma]);

  useEffect(() => {
    if (!isTurmaModalOpen) setEditingTurma(null);
  }, [isTurmaModalOpen]);

  return (
    <Layout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <Link to="/dashboard" className="inline-flex items-center text-sm font-medium text-brand-gray-600 dark:text-brand-gray-400 hover:text-brand-blue-500 dark:hover:text-brand-blue-400 transition-colors mb-4">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Voltar para o Dashboard
          </Link>
          <h1 className="text-3xl font-bold text-brand-gray-900 dark:text-white">Clientes e Alunos</h1>
          <p className="text-brand-gray-600 dark:text-brand-gray-400 mt-2">Gerencie sua base de clientes, alunos matriculados e turmas de aulas.</p>
        </motion.div>

        <div className="mb-8">
          <div className="border-b border-brand-gray-200 dark:border-brand-gray-700">
            <nav className="-mb-px flex space-x-6" aria-label="Tabs">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => { setActiveTab(tab.id); setSearchTerm(''); }}
                  className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center transition-colors ${
                    activeTab === tab.id
                      ? 'border-brand-blue-500 text-brand-blue-600 dark:text-brand-blue-400'
                      : 'border-transparent text-brand-gray-500 hover:text-brand-gray-700 hover:border-brand-gray-300 dark:text-brand-gray-400 dark:hover:text-brand-gray-200 dark:hover:border-brand-gray-600'
                  }`}
                >
                  <tab.icon className="mr-2 h-5 w-5" />
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        <div className="bg-white dark:bg-brand-gray-800 rounded-xl shadow-lg p-4 mb-8 border border-brand-gray-200 dark:border-brand-gray-700">
          <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
            <div className="w-full sm:w-auto sm:flex-1">
              <Input
                placeholder={searchPlaceholder}
                icon={<Search className="h-4 w-4 text-brand-gray-400" />}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button onClick={() => {
              if (activeTab === 'clientes' || activeTab === 'alunos') setIsAlunoModalOpen(true);
              if (activeTab === 'professores') setIsProfessorModalOpen(true);
              if (activeTab === 'turmas') setIsTurmaModalOpen(true);
            }}>
              <Plus className="h-4 w-4 mr-2" />
              {addButtonLabel}
            </Button>
          </div>
        </div>

        <AnimatePresence mode="wait">
          <motion.div key={activeTab} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }}>
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <AlunoModal 
        isOpen={isAlunoModalOpen} 
        onClose={() => setIsAlunoModalOpen(false)} 
        onSave={handleSaveAluno} 
        onDelete={handleDeleteAluno}
        initialData={editingAluno}
        availableSports={availableSports}
        availablePlans={availablePlans}
        modalType={activeTab === 'clientes' ? 'Cliente' : 'Aluno'}
        allAlunos={alunos}
        onDataChange={handleDataChange}
        gamificationRewards={gamificationRewards}
      />
      <ProfessorModal 
        isOpen={isProfessorModalOpen} 
        onClose={() => setIsProfessorModalOpen(false)} 
        onSave={handleSaveProfessor}
        onDelete={handleDeleteProfessor}
        initialData={editingProfessor} 
      />
      <TurmaModal 
        isOpen={isTurmaModalOpen}
        onClose={() => setIsTurmaModalOpen(false)}
        onSave={handleSaveTurma}
        initialData={editingTurma}
        professores={professores}
        quadras={quadras}
      />
      <ConfirmationModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={handleConfirmDelete}
        title="Confirmar ExclusÃ£o"
        message={
            <>
                <p>VocÃª tem certeza que deseja excluir <strong>{itemToDelete?.name}</strong>?</p>
                <p className="mt-2 text-xs text-red-500 dark:text-red-400">Esta aÃ§Ã£o Ã© irreversÃ­vel e todos os dados associados podem ser perdidos.</p>
            </>
        }
        confirmText="Sim, Excluir"
      />
    </Layout>
  );
};

const AlunosList: React.FC<{ alunos: Aluno[], onEdit: (aluno: Aluno) => void }> = ({ alunos, onEdit }) => {
  if (alunos.length === 0) {
    return <PlaceholderTab title="Nenhum cliente/aluno encontrado" description="Cadastre novos clientes ou alunos para vÃª-los aqui." />;
  }
  
  const getStatusProps = (status: Aluno['status']) => {
    switch (status) {
      case 'ativo': return { icon: BadgeCheck, color: 'text-green-500', label: 'Ativo' };
      case 'inativo': return { icon: BadgeX, color: 'text-red-500', label: 'Inativo' };
      case 'experimental': return { icon: BadgeHelp, color: 'text-yellow-500', label: 'Experimental' };
    }
  };

  return (
    <div className="bg-white dark:bg-brand-gray-800 rounded-xl shadow-lg border border-brand-gray-200 dark:border-brand-gray-700 overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-brand-gray-200 dark:divide-brand-gray-700">
          <thead className="bg-brand-gray-50 dark:bg-brand-gray-700/50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">Cliente/Aluno</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">Status</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">CrÃ©dito</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">NÃ­vel / Pontos</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">Plano</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-brand-gray-500 dark:text-brand-gray-300 uppercase tracking-wider">Membro Desde</th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-brand-gray-800 divide-y divide-brand-gray-200 dark:divide-brand-gray-700">
            {alunos.map((aluno, index) => {
              const statusProps = getStatusProps(aluno.status);
              const levelName = (aluno.gamification_levels as { name: string } | null)?.name || 'Iniciante';
              return (
                <motion.tr 
                  key={aluno.id}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: index * 0.05 }}
                  onClick={() => onEdit(aluno)}
                  className="hover:bg-brand-gray-50 dark:hover:bg-brand-gray-700/50 cursor-pointer"
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        {aluno.avatar_url ? (
                          <img className="h-10 w-10 rounded-full object-cover" src={aluno.avatar_url} alt={aluno.name} />
                        ) : (
                          <div className="h-10 w-10 rounded-full bg-brand-gray-200 dark:bg-brand-gray-700 flex items-center justify-center text-brand-gray-500 font-bold">
                            {aluno.name ? aluno.name.charAt(0).toUpperCase() : '?'}
                          </div>
                        )}
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-brand-gray-900 dark:text-white">{aluno.name}</div>
                        <div className="text-sm text-brand-gray-500 dark:text-brand-gray-400">{aluno.email}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusProps.color.replace('text-', 'bg-').replace('-500', '-100')} dark:${statusProps.color.replace('text-', 'bg-').replace('-500', '-900/50')} ${statusProps.color}`}>
                      <statusProps.icon className="h-3 w-3 mr-1.5" />
                      {statusProps.label}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {(aluno.credit_balance && aluno.credit_balance > 0) ? (
                      <div className="text-sm font-semibold text-green-600 dark:text-green-400 flex items-center">
                        <DollarSign className="h-4 w-4 mr-1"/>
                        {aluno.credit_balance.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                      </div>
                    ) : (
                      <div className="text-sm text-brand-gray-500 dark:text-brand-gray-400">-</div>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-brand-gray-900 dark:text-white flex items-center">
                      <Star className="h-4 w-4 mr-1 text-yellow-400" />
                      {levelName}
                    </div>
                    <div className="text-sm text-brand-gray-500">{aluno.gamification_points || 0} pontos</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-brand-gray-900 dark:text-white">{aluno.plan_name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-brand-gray-500 dark:text-brand-gray-400">
                    {format(parseDateStringAsLocal(aluno.join_date), 'dd/MM/yyyy')}
                  </td>
                </motion.tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

const ProfessoresList: React.FC<{ professores: Professor[], onEdit: (prof: Professor) => void, onDelete: (id: string) => void }> = ({ professores, onEdit, onDelete }) => {
  if (professores.length === 0) return <PlaceholderTab title="Nenhum professor encontrado" description="Cadastre os professores que dÃ£o aulas na sua arena." />;
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {professores.map((prof, index) => (
        <motion.div
          key={prof.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.05 }}
          className="bg-white dark:bg-brand-gray-800 rounded-xl shadow-lg border border-brand-gray-200 dark:border-brand-gray-700 p-5 flex flex-col justify-between"
        >
          <div>
            <div className="flex justify-between items-start mb-4">
              <div className="flex items-center gap-4">
                <div className="flex-shrink-0 h-16 w-16">
                  {prof.avatar_url ? (
                    <img src={prof.avatar_url} alt={prof.name} className="w-16 h-16 rounded-full object-cover border-2 border-brand-gray-200 dark:border-brand-gray-600" />
                  ) : (
                    <div className="w-16 h-16 rounded-full bg-brand-gray-200 dark:bg-brand-gray-700 flex items-center justify-center border-2 border-brand-gray-200 dark:border-brand-gray-600">
                      <span className="text-2xl text-brand-gray-500 font-bold">
                        {prof.name ? prof.name.charAt(0).toUpperCase() : '?'}
                      </span>
                    </div>
                  )}
                </div>
                <div>
                  <h3 className="font-bold text-lg text-brand-gray-900 dark:text-white">{prof.name}</h3>
                  <p className="text-sm text-brand-gray-600 dark:text-brand-gray-400">{prof.email}</p>
                </div>
              </div>
              <div className="flex space-x-1">
                  <Button variant="ghost" size="sm" onClick={() => onEdit(prof)} className="p-2" title="Editar"><Edit className="h-4 w-4" /></Button>
                  <Button variant="ghost" size="sm" onClick={() => onDelete(prof.id)} className="p-2 hover:text-red-500" title="Excluir"><Trash2 className="h-4 w-4" /></Button>
              </div>
            </div>

            <div className="space-y-2 text-sm mb-4 border-t border-brand-gray-200 dark:border-brand-gray-700 pt-4">
              {prof.phone && (
                <div className="flex items-center text-brand-gray-600 dark:text-brand-gray-400">
                  <Phone className="h-4 w-4 mr-2 text-brand-gray-400" />
                  <span>{prof.phone}</span>
                </div>
              )}
              <div className="flex items-center text-brand-gray-600 dark:text-brand-gray-400">
                <Calendar className="h-4 w-4 mr-2 text-brand-gray-400" />
                <span>Incluso em: {format(new Date(prof.created_at), 'dd/MM/yyyy')}</span>
              </div>
            </div>
          </div>
          
          <div className="mt-auto">
            <h4 className="text-sm font-medium text-brand-gray-800 dark:text-brand-gray-200 mb-2">Especialidades:</h4>
            <div className="flex flex-wrap gap-2">
              {prof.specialties.map(spec => (
                <span key={spec} className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">{spec}</span>
              ))}
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
};

const TurmasList: React.FC<{ turmas: Turma[], professores: Professor[], quadras: Quadra[], onEdit: (turma: Turma) => void, onDelete: (id: string) => void }> = ({ turmas, professores, quadras, onEdit, onDelete }) => {
  if (turmas.length === 0) return <PlaceholderTab title="Nenhuma turma encontrada" description="Clique em 'Adicionar Turma' para criar sua primeira turma e comeÃ§ar a agendar aulas." />;
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {turmas.map((turma, index) => (
        <TurmaCard
          key={turma.id}
          turma={turma}
          professor={professores.find(p => p.id === turma.professor_id)}
          quadra={quadras.find(q => q.id === turma.quadra_id)}
          onEdit={() => onEdit(turma)}
          onDelete={() => onDelete(turma.id)}
          index={index}
        />
      ))}
    </div>
  );
};

const PlaceholderTab: React.FC<{ title: string, description: string }> = ({ title, description }) => (
  <div className="text-center py-16">
    <motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} className="max-w-md mx-auto">
      <div className="flex justify-center items-center w-16 h-16 bg-brand-gray-100 dark:bg-brand-gray-800 rounded-full mx-auto mb-6">
        <Users className="h-8 w-8 text-brand-gray-400" />
      </div>
      <h3 className="text-xl font-bold text-brand-gray-900 dark:text-white mb-2">{title}</h3>
      <p className="text-brand-gray-600 dark:text-brand-gray-400">{description}</p>
    </motion.div>
  </div>
);

export default Alunos;
